---------------------------------------------------------------------------

by carusogabriel at 2018-03-10T23:13:04Z

@nicolas-grekas Should be ready to go :smiley:

---------------------------------------------------------------------------

by keradus at 2018-03-12T13:01:35Z

looks better with every change @carusogabriel !
(btw, if you would not squash, it would be way easier to review the changes, now one need to read whole diff again and again, instead of just patch - don't worry, squash can be done during merging!)

one last thing - could you extend `.travis.yml` matrix to contain 7.2 and 7.3 ?

---------------------------------------------------------------------------

by carusogabriel at 2018-03-12T13:29:09Z

@keradus
> btw, if you would not squash, it would be way easier to review the changes, now one need to read whole diff again and again, instead of just patch - don't worry, squash can be done during merging!

Sure, thanks for the tip, I always amend my commits, but I'll start to commit and then squash them before merging the PR, thanks!

> could you extend .travis.yml matrix to contain 7.2 and 7.3 ?

Sure, pushing these changes ASAP.

---------------------------------------------------------------------------

by carusogabriel at 2018-03-12T15:29:56Z

@keradus There's one remain error in PHP 7.3 that I couldn't figure out how to solve. Maybe we should just add 7.2?

---------------------------------------------------------------------------

by keradus at 2018-03-12T18:05:43Z

the feature you are adding has to be tested under 7.3. if not, then we test only "does our polyfill work like we expect", but don't "does our polyfill expectation are same as original implementation".
yet, I agree 7.3 failing is not related to your PR.
sth nice to have for sure, but maybe indeed out of the scope here. nevertheless, adding it (even temporary) to travis matrix has proven that your changes works same as native implementation.

if you ask me, I would be fine with reverting travis changes and do it as separated PR.

---------------------------------------------------------------------------

by keradus at 2018-04-06T11:34:34Z

@stof , your request has been already fulfilled, could you please revisit your review ?

In general, missing thing on Travis is related to `Mbstring`, thus it's not connected with feature introduced by this PR.
Could we make this one released?

---------------------------------------------------------------------------

by nicolas-grekas at 2018-04-19T09:47:39Z

Would you mind adding `hrtime()` also in the PHP 7.3 polyfill (based on `microtime()`)?
```
  . Added monotonic timer function hrtime([bool get_as_num]). It returns an
    array of the form [seconds, nanoseconds] with the timestamp starting at
    an unspecified point in the past. If the optional argument is passed as
    true, the return value is an integer on 64-bit systems or float on
    32-bit systems, representing the nanoseconds. The timestamp is not
    adjustable and is not related to wall clock or time of day. The timers
    are available under Linux, FreeBSD, Windows, Mac, SunOS, AIX and their
    derivatives. If no required timers are provided by a corresponding
    platform, the function returns false.
```

---------------------------------------------------------------------------

by keradus at 2018-04-19T10:44:18Z

Could we please add different feature with different PR?
This one is already awaiting for 2.5 months, no need to postpone it even further ;)
